---------------GITCONFIG
create an alias in ~/.gitconfig file
copy next lines into it
[user]
	email = srbcheema1@gmail.com
	name = Sarbjit Singh
[alias]
	showdown = log --decorate --oneline --all --graph


--------------------FORK
start by forking the project
clone the project to your pc (from fork not from original)
    {coz this will give it name origin}
    git clone <link to your fork repo>
now add your own remote repo (my convention to name it main)
    git remote add main <link to main repo>

you can check your remote repositories by
    git remote -v

create a new local branch
    git checkout -b <new branch name>
        generally work on different branch not on master

to move to other commit or branch
    git checkout [-b] <commit/branchname>
        -b to create new branch

if you wanna push your changes to remote repo
    git push [-u] <remote repo> <branch name>
        -u to create new branch there //not sure


-------------------MERGE for SELF PROJECT
using git merge
    create a new branch .. while standing on master and status is null
    git checkout -b changes
    //do work there and commit
    git add .
    git commit -m ""
    //go back to master
    git checkout master
    //merge it
    git merge changes
    //push to origin master
    git push origin master

-------------------MERGE for ORG PROJECT
using git merge
    create a new branch .. while standing on master and status is null
    git checkout -b changes
    //do work there and commit
    git add <file names>        //dont use "git add ." while working with org
    //check difference that is going to be commited
    // ALSO TRY NOT TO ADD .gitignore  FILE
    git commit -m ""

    //push to your remote repo
    git push -u origin changes
    //make a PR

    //when it is accepted
    //fetch the main code
    git fetch main master
    //checkout to master of local
    git merge main master
    //push changes to your own remote master
    git push origin master
    //delete the branch
    git branch -d changes
    git push -d origin changes  //delete branch remotely also
    OR      git push origin :changes

NOTE :
always call merge from a branch with less commits or back in commits
for ex we did changes in "changes" branch
    now go to master and call merge changes




-----------REBASE:
using git rebase
create a branch changes
work on it
now commit it
now run
    git rebase master //before it master should be properly in sinc
after this we can checkout master and merge it to changes if it is our own project







-----------------TO MAKE YOUR CODE EVEN WITH MAIN CODE:
    git fetch main master
    git checkout master
    git merge main/master
    //dont use rebase here as they both are same branch










to push branch by another name do
    git push <remote repo> <localbranch>:<remote branch>


-------------yet to be discovered
git stash ... to save changes in buffer to be used later
git squash
shallow depth clone
git bisect


-----------------
git commit --allow-empty -m "Trigger"
just to trigger the travis
